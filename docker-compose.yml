services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    restart: unless-stopped
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - bigdata-net

  kafka:
    image: confluentinc/cp-kafka:latest
    restart: unless-stopped
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"  # expose one broker for external access
    environment:
      KAFKA_BROKER_ID_COMMAND: "hostname | awk -F'-' '{print $NF}'"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181

      # Internal and external listeners
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT

      # For offset topic (recommended replication >= 2 in production)
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3

      # Allow deleting topics (for development/debugging)
      KAFKA_DELETE_TOPIC_ENABLE: "true"
    networks:
      - bigdata-net

  #  filebeat:
  #    image: elastic/filebeat:8.17.4
  #    restart: unless-stopped
  #    user: root
  #    ports:
  #      - "5066:5066"  # Expose monitoring por
  #    volumes:
  #      - ./filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
  #      - ./logs:/var/log:ro
  #      - /var/lib/docker/containers:/var/lib/docker/containers:ro
  #      - /var/run/docker.sock:/var/run/docker.sock:ro
  #    command: [ "--strict.perms=false" ]  # disable permission check in dev
  #    networks:
  #      - bigdata-net

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    restart: unless-stopped
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local-cluster
      - KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS=kafka:29092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    depends_on:
      - kafka
    networks:
      - bigdata-net

  minio:
    image: minio/minio
    command: server /data --console-address ":9001"
    restart: unless-stopped
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
      - ./minio/init-buckets.sh:/docker-entrypoint-init.d/init-buckets.sh
    networks:
      - bigdata-net

  fluentbit:
    build:
      context: ./fluentbit
      dockerfile: fluent-bit.Dockerfile
    restart: unless-stopped
    volumes:
      - ./logs:/var/log/app
    environment:
      - AWS_ACCESS_KEY_ID=minioadmin
      - AWS_SECRET_ACCESS_KEY=minioadmin
    ports:
      - "2020:2020"
    depends_on:
      - kafka
      - minio
    networks:
      - bigdata-net

  postgres:
    image: postgres:latest
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: mysecret
      POSTGRES_DB: system_logs
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - bigdata-net

  pgadmin:
    image: elestio/pgadmin
    restart: unless-stopped
    ports:
      - "5050:8080"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_LISTEN_PORT: 8080
    volumes:
      - ./postgres/servers.json:/pgadmin4/servers.json
    depends_on:
      - postgres
    networks:
      - bigdata-net

  flink-jobmanager:
    build:
      context: ./flink
      dockerfile: flink-connected.Dockerfile
    command: jobmanager
    restart: unless-stopped
    ports:
      - "8081:8081"  # Flink Web UI
      - "6123:6123"  # RPC port
    networks:
      - bigdata-net
    volumes:
      - ./flink/flink-conf.yml:/opt/flink/conf/flink-conf.yml

  flink-taskmanager:
    build:
      context: ./flink
      dockerfile: flink-connected.Dockerfile
    command: taskmanager
    restart: unless-stopped
    depends_on:
      - flink-jobmanager
    networks:
      - bigdata-net
    volumes:
      - ./flink/flink-conf.yml:/opt/flink/conf/flink-conf.yml
      - flink_tm_data:/data

  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - bigdata-net

  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
      - postgres
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - bigdata-net

  # Automatic services: submit-flink-job

networks:
  bigdata-net:
    driver: bridge

volumes:
  flink_tm_data:
  minio_data:
  postgres_data:
  grafana_data: