services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.9.0
    restart: unless-stopped
    container_name: zookeeper
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
    networks:
      - bigdata-net

  kafka:
    image: confluentinc/cp-kafka:7.9.0
    restart: unless-stopped
    depends_on:
      - zookeeper
    expose:
      - "29092"
    environment:
      - KAFKA_BROKER_ID_COMMAND="echo $${HOSTNAME##*_}"
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:29092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_DELETE_TOPIC_ENABLE=true
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
    volumes:
      - ./kafka/kafka-entrypoint.sh:/kafka-entrypoint.sh:ro
    command: [ "/kafka-entrypoint.sh" ]
    networks:
      - bigdata-net

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    restart: unless-stopped
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local-cluster
      - KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS=kafka:29092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    depends_on:
      - kafka
    networks:
      - bigdata-net

  filebeat:
    image: elastic/filebeat:8.17.4
    restart: unless-stopped
    user: root
    ports:
      - "5066:5066"  # Expose monitoring port
    volumes:
      - ./filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - ./logs:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command: [ "--strict.perms=false" ]  # disable permission check in dev
    networks:
      - bigdata-net

  postgres:
    image: postgres:15
    restart: unless-stopped
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=mysecret
      - POSTGRES_DB=postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - bigdata-net

  pgadmin:
    image: elestio/pgadmin
    restart: unless-stopped
    ports:
      - "5050:8080"
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@admin.com
      - PGADMIN_DEFAULT_PASSWORD=admin
      - PGADMIN_LISTEN_PORT=8080
    volumes:
      - ./postgres/servers.json:/pgadmin4/servers.json
    depends_on:
      - postgres
    networks:
      - bigdata-net

  flink-jobmanager:
    build:
      context: ./flink
      dockerfile: flink-connected.Dockerfile
    command: [ "/opt/flink/bin/jobmanager.sh", 'start-foreground' ]
    restart: unless-stopped
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flink-jobmanager
    ports:
      - "8081:8081"  # Flink Web UI
      - "6123:6123"  # RPC port
      - "9249:9249"
    networks:
      - bigdata-net
    volumes:
      - ./flink/jobs:/opt/flink/jobs
      - ./data/BGL:/opt/flink/data/BGL
      - ./flink/flink-conf.yaml:/opt/flink/conf/flink-conf.yaml:ro
      - ./flink/core:/opt/flink/core

  flink-taskmanager:
    build:
      context: ./flink
      dockerfile: flink-connected.Dockerfile
    command: [ "/opt/flink/bin/taskmanager.sh", "start-foreground" ]
    restart: unless-stopped
    depends_on:
      - flink-jobmanager
    ports:
      - "9250:9249"
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flink-jobmanager
    networks:
      - bigdata-net
    volumes:
      - flink_tm_data:/data
      - ./data/BGL:/opt/flink/data/BGL
      - ./flink/flink-conf.yaml:/opt/flink/conf/flink-conf.yaml:ro
      - ./flink/jobs:/opt/flink/jobs
      - ./flink/core:/opt/flink/core

  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - bigdata-net

  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
      - postgres
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - bigdata-net

networks:
  bigdata-net:
    driver: bridge

volumes:
  flink_tm_data:
  postgres_data:
  grafana_data:
