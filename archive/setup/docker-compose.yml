networks:
  bigdata-net:
    driver: bridge

services:

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    networks:
      - bigdata-net
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_CLIENT_PORT}
    ports:
      - "${ZOOKEEPER_CLIENT_PORT}:${ZOOKEEPER_CLIENT_PORT}"

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    networks:
      - bigdata-net
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: ${KAFKA_BROKER_ID}
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_CLIENT_PORT}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:${KAFKA_PORT}
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:${KAFKA_PORT}
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_DELETE_TOPIC_ENABLE: "true"
    ports:
      - "${KAFKA_PORT}:${KAFKA_PORT}"

  spark-master:
    image: bitnami/spark:latest
    container_name: spark-master
    networks:
      - bigdata-net
    environment:
      - SPARK_MODE=master
    ports:
      - "${SPARK_MASTER_PORT}:${SPARK_MASTER_PORT}"
      - "${SPARK_UI_PORT}:${SPARK_UI_PORT}"

  spark-worker:
    image: bitnami/spark:latest
    networks:
      - bigdata-net
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:${SPARK_MASTER_PORT}
      - SPARK_WORKER_DIR=/opt/spark/work-dir
    depends_on:
      - spark-master
    deploy:
      replicas: 2
    volumes:
      - spark_worker_data:/opt/spark/work-dir

  flink-jobmanager:
    build:
      context: .
      dockerfile: flink-s3a.Dockerfile
    container_name: flink-jobmanager
    networks:
      - bigdata-net
    command: jobmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flink-jobmanager
        s3.endpoint: http://minio:9000
        s3.path.style.access: true
        s3.access-key: ${MINIO_ROOT_USER}
        s3.secret-key: ${MINIO_ROOT_PASSWORD}
    ports:
      - "${FLINK_UI_PORT}:8081"

  flink-taskmanager:
    build:
      context: .
      dockerfile: flink-s3a.Dockerfile
    command: taskmanager
    networks:
      - bigdata-net
    depends_on:
      - flink-jobmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flink-jobmanager
        s3.endpoint: http://minio:9000
        s3.path.style.access: true
        s3.access-key: ${MINIO_ROOT_USER}
        s3.secret-key: ${MINIO_ROOT_PASSWORD}
    deploy:
      replicas: 2
    volumes:
      - flink_tm_data:/data

  minio:
    image: minio/minio:latest
    container_name: minio
    networks:
      - bigdata-net
    ports:
      - "${MINIO_API_PORT}:9000"
      - "${MINIO_UI_PORT}:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"

  create-minio-bucket:
    image: minio/mc:latest
    networks:
      - bigdata-net
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
        sleep 5;
        mc alias set myminio http://minio:${MINIO_API_PORT} ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD};
        mc ls myminio/my-bucket || mc mb myminio/my-bucket;
        mc anonymous set download myminio/my-bucket;
        exit 0;
      "

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    networks:
      - bigdata-net
    ports:
      - "8088:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092
    depends_on:
      - kafka

  postgres:
    image: postgres:15
    container_name: postgres
    networks:
      - bigdata-net
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    networks:
      - bigdata-net
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
    depends_on:
      - postgres

volumes:
  spark_worker_data:
  flink_tm_data:
  minio_data:
  postgres_data:
